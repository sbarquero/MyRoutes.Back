tags:
- name: Auth
  description: Authorization API endpoints
- name: Users
  description: Users API endpoints

paths:
# [POST] auth/login
  /auth/login:
    post:
      tags:
      - Auth
      summary: User login
      parameters:
      - name: body
        in: body
        description: User login
        required: true
        schema:
          $ref: '#/definitions/LoginDto'
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [POST] auth/register
  /auth/register:
    post:
      tags:
      - Auth
      summary: User registration
      parameters:
      - name: body
        in: body
        description: Register for a new user
        required: true
        schema:
          $ref: '#/definitions/CreateUserDto'
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [GET] users
  /users:
    get:
      tags:
      - Users
      summary: Find all Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [POST] users
    post:
      tags:
      - Users
      summary: Add an User
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/CreateUserDto'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] users/id
  /users/{id}:
    get:
      tags:
      - Users
      summary: Find an User by Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        404:
          description: 'Not Found'
        500:
          description: 'Server Error'

# [PUT] users/id
    put:
      tags:
      - Users
      summary: Update an User by Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/UpdateUserDto'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        404:
          description: 'Not Found'
        500:
          description: 'Server Error'

# [DELETE] users/id
    delete:
      tags:
      - Users
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        404:
          description: 'Not Found'
        500:
          description: 'Server Error'

# definitions
definitions:
  LoginDto:
    type: object
    required:
        - email
        - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password
  CreateUserDto:
    type: object
    required:
        - name
        - email
        - password
    properties:
      name:
        type: string
        description: user Name
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password
  UpdateUserDto:
    type: object
    required:
    properties:
      name:
        type: string
        description: user Name
      password:
        type: string
        description: user Password
      rol:
        type: string
        description: user Rol
      active:
        type: boolean
        description: user is active
      google:
        type: boolean
        description: user use google authentication

schemes:
 - https
 - http
